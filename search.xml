<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[选择排序]]></title>
    <url>%2F2018%2F05%2F05%2F%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[这次带来的是希尔排序，这个排序法有点复杂，请耐心往下看 希尔排序是为了解决插入排序效率低的问题，插入排序的时间复杂度严重依赖于数据列的有序度，希尔排序的作用就是将数列整理为打字有序从而减少时间复杂度 希尔排序的基本思想：将数据分为若干组，对每组进行直接插入排序使整个数列基本有序，最后再直接插入排序(这段话可能不好理解，按我的理解，我们先按步长分组比如12个数据我们步长为3时分成4组 大概是 (1 2 6|7 5 3 4 8 9 10 11 12) 我们要做的就是将后边大于步长为下标的数据一个个地遍历[后9个：3-11]，并且相隔步长与前面的数据相比较插入，直到不满足插入条件 ) 我在这里贴个b站up主上传的希尔排序可视化视频，特别有趣形象，建议参考：https://www.bilibili.com/video/av17004970 下面贴代码: void ShellSort(int sort[], int N) { int tags = 1;//排序间隔,步长 int j = 0; for ( tags = N/2; tags > 0; tags = tags/2)//间隔选取在1—N/2之间 { for (int i = tags; i < N; i++) //插入排序过程，把待排集合遍历,对应于前面说的把后边大于tags下标的数据遍历 { j = i; while (j >= tags && sort[i] < sort[j - tags]) //一直朝前边插入，直到不能插入，即插入排序 { swap(sort[j],sort[j-tags]); j = j - tags; } } } } 时间复杂度大约是 O(n1.25)，空间复杂度是O(1) ，是不稳定排序]]></content>
      <tags>
        <tag>Base_arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选择排序]]></title>
    <url>%2F2018%2F05%2F03%2F%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[先将待排序列分为 已排序部分 和 未排序部分 选择排序法，即在每个计算步骤中选出一个最小值加入到已排序列中直至将待排数据选完 void Selection_Sort(int sort[], int N) { int min = 0, j = 0; for (int i = 0; i]]></content>
      <tags>
        <tag>Base_arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序]]></title>
    <url>%2F2018%2F05%2F02%2F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[今天带来的是基础算法之冒泡排序，冒泡排序，可以先从字面上理解，冒泡就是指算法的操作过程像泡泡一样慢慢浮到水面上，比如，我们使一组待排数列的最小值经多次比较最终移动到数列的某一端 (举个例子：假如一个小个子在按身高排队，这时他站在队尾，他需要在一群人中找到合适自己身高的位置，根据冒泡排序的思想，他应该与他前面的人比身高，如果比前面的人矮，他们俩就换位置，然后他接着与新的站在他前面的人比身高，一直比啊比啊比啊比，最后找到比他矮的人，他就完成了他的任务，我们给所有人都按这个规矩比遍，冒泡排序就完成了) 待排数列分为已排集合和未排集合两部分 每次的排序都会将比已排数列次小的值放入指定位置 每次都会有数据元素进入最终位置,即每次的排序对于已排数列已经是最终结果 (假如第一次最小值到了数组头，第二次排序跟在它后面的一定是次小值) 参考代码： int BubbleSort(int sort[], int N)//冒泡排序{ bool flag = true; int cou = 0;//存在相反的元素 for (int i = 0; flag; i++) { flag = false; for (int j = N-1; j &gt;= i+1 ; j–)//从后往前搜索直到已排数列的边沿 { if (sort[j]&lt;sort[j-1]) { swap(sort[j],sort[j-1]); flag = true; cou++; } } }} 时间复杂度是 O(n2)空间复杂度是O(1) ·代码参考了《挑战程序设计竞赛》的内容]]></content>
      <tags>
        <tag>Base_arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[插入排序]]></title>
    <url>%2F2018%2F05%2F01%2F%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[插入排序法，思想是将待排数列分为&lt;待排数据集合&gt;和&lt;已排数据集合&gt;两个部分，每次从待排数列中(按从低到高，或从高到低)取一个元素，在已排数列中从后往前搜索自己该插入的地方插入(类似单链表的有序插入)，一次插入后还要一直朝前搜索，直到不能插入时停止 ##下面从代码的角度分析 #include #include using namespace std; void print(int sort[],int N)//将待排数列打印出来 { for (int i = 0; i < N; i++) cout < sort[i]]]></content>
      <tags>
        <tag>Base_arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[finaltest]]></title>
    <url>%2F2018%2F04%2F27%2Ffinaltest%2F</url>
    <content type="text"><![CDATA[分类页面使用方法: #—title: finaltestcategories: flag1 #— 标签页使用方法: #—title: testtags: -test #—]]></content>
      <categories>
        <category>flag1</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于用Git和Hexo创建个人博客的一些经验，换电脑以后怎么办？]]></title>
    <url>%2F2018%2F04%2F26%2Ftest3%2F</url>
    <content type="text"><![CDATA[大家好，相信在用hexo搭建自己的博客时，或多或少会遇到一些莫名其妙的坑，下面就我搭建过程总结出一些关键点，希望能给你带来帮助 Node.js是用来做什么的？ 它一种javascript的运行环境，能够使得javascript脱离浏览器运行 Git是什么？ git是一个版本控制工具(软件)，而github是一个用git做版本控制的项目托管平台(大家放东西的地方) 大家可以参考一下：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000http://blog.jobbole.com/111187/ 总之就是利用github提供的托管服务，加上hexo的网页搭建出你的博客了 以下不写出完整过程，仅写出一些关键点 1 首先是安装Node.js和Git 2 在github上注册并申请自己的仓库(我们的页面会上传上去并由github提供它的服务) 3 (关键)在安装npm的过程中可能会遇到很多警告，请仔细查看，可以用 npm -v (查看当前npm版本)查看是否安装成功，不成功的可以(翻过去)再安装一次 4 匹配自己的github库(在本机创建密钥，在github上填写)，这样以后才能上传自己的博客 5 配置文件有两个，一个是主题配置文件，一个是站点配置文件，站点配置文件在自己的bolg文件夹下，主题配置文件在 **/blog/theme 文件夹下，修改时注意区分 6 每个参数后基本都有空格 7 个别hexo官方的主题可能会无法显示 8 标签页，分类页，的创建问题，加上—可的index标签页可能会出现tags cannot found的问题404，不加—虽然不会404但是标签页不能点击，这个我目前还弄不清楚 9 评论功能可以利用第三方服务，这里推荐使用Lean Clond搭建，LC有很方便的数据可视化等功能，便于管理 10 换电脑以后怎么继续使用？ 答:按原先的搭建步骤搭建准备环境(node.js等)，拷贝老的主题文件，在github上添加新电脑产生的密钥授权即可(ssh密钥) 11 hexo的使用可以参考官方文档: https://hexo.io/zh-cn/docs/ 附：Next主题使用: http://theme-next.iissnan.com/ 如何发布第一篇文章: https://www.jianshu.com/p/2c9f0b3b2b0e Lean Clond: https://leancloud.cn/]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F04%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
